#!/bin/sh
# \
exec $ANTELOPE/bin/awish $0 -- "$@"

package require Datascope

# QCanalysis_control program
#
# help QC analysts to manage databases of parametric earthquake information
#
# Natasha Ruppert
# Geophysical Institute
# University of Alaska, Fairbanks
# February, 2010

lappend auto_path $env(ANTELOPE)/data/tcl/library
lappend auto_path $env(ANTELOPE)/data/tcl/pkg2
source $env(ANTELOPE)/data/tcl/pkg2/dbtable.tcl

package require Tclx
package require dbtable

set tcl_precision 17

proc init_globals {} {
	global State env

	set State(user) $env(USER)

	pfget qcanalysis_control master_site_database State(site_db)

	set State(ignore_tables) [list wfdisc site sitechan instrument sensor \
			dlsensor sensormodel wfmeas predarr emodel\
			calibration network affiliation snetsta stage schanloc]

	pfget qcanalysis_control analysis_control_database State(tracking_dbname) 

	if { ! [file exists $State(tracking_dbname)] } {
		set message "Tracking database $State(tracking_dbname) " 
		append message " not present. Please contact administrator.\n"
		wm withdraw .
		mytkdialog [unique_window .] Error $message center OK
		exit -1
	}
	set State(dbtrack) [dbopen $State(tracking_dbname) r+] 
	foreach table [list days weeks months] {
		set State(dbtrack) [dblookup $State(dbtrack) 0 $table 0 0]
		if { ! [dbquery $State(dbtrack) dbRECORD_COUNT] } {
			set message "$State(tracking_dbname).$table "
			append message "is not present or empty. "
			append message "Please contact administrator.\n"
			wm withdraw .
			mytkdialog [unique_window .] Error $message center OK
			exit -1
		}
		if { ! [dbquery $State(dbtrack) dbTABLE_IS_WRITEABLE] } {
			set message "$State(tracking_dbname).$table "
			append message "is not writable by you. "
			append message "Please contact administrator.\n"
			wm withdraw .
			mytkdialog [unique_window .] Error $message center OK
			exit -1
		}
	}

	set State(days_table_checksum) [lindex [exec /usr/bin/sum $State(tracking_dbname).days] 0]
}

proc refresh_dbinfo_if_necessary {} {
	global State

	if { [dbinfo_is_stale] } {
		set newsum [lindex [exec /usr/bin/sum $State(tracking_dbname).days] 0]
		set State(days_table_checksum) $newsum
		redraw_checkout
		redraw_checkin
	}
}

proc dbinfo_is_stale {} {
	global State

	set newsum [lindex [exec /usr/bin/sum $State(tracking_dbname).days] 0]

	if { $newsum != $State(days_table_checksum) } {
		return 1
	} else {
		return 0
	}
}

proc checkout { iwidget widget x y db row } {
	global State env

	set message "Entrusting QCing of day "
	append message "[strdate [dbgetv $db 0 $row time]] "
	append message "to user $State(user)"

	set answer [mytkdialog [unique_window .] \
		"Database checkout" $message center Accept Shirk]

	switch $answer {
	0	{
			set check_analyst [dbgetv $db 0 $row qcanalyst]
			if { $check_analyst != "-" } {
				set time [dbgetv $db 0 $row time]
				set message "Synchronization overlap: [strdate $time]"
				append message " was just checked out to $check_analyst."
				append message " Please choose another day."
				mytkdialog [unique_window .] \
				Overlap \
				$message \
				center \
				Ok
				redraw_checkout
				return
			} else {
				# Fallthrough
			}
		}
	1	{
			return
		}
	}

	set time [dbgetv $db 0 $row time]
	set processdir $env(HOME)/qc/[epoch2str $time %Y_%m]
	exec mkdir -m 0755 -p $processdir
	set process_dbname [epoch2str $time analyzed_%Y_%m_%d]
	append descriptor $processdir / $process_dbname

	if { [info exists env(SCHEMA_DEFAULT)] } {
		set schema $env(SCHEMA_DEFAULT)
	} else {
		set schema css3.0
	}
	regsub {[^/]*$} $State(site_db) {{&}} site_db
	
	set year [epoch2str $time %Y]
	set jday [epoch2str $time %j]
	
	pfget qcanalysis_control analyzed_events_database quakes_db
	set quakes_db [epoch2str $time $quakes_db]

	pfget qcanalysis_control archive_database archive_db
	set archive_db [epoch2str $time $archive_db]
	regsub {[^/]*$} $archive_db {{&}} archive_db
		
	set tables [list arrival assoc event netmag origerr origin stamag]

	foreach table $tables {
		puts stderr "copying $quakes_db.$table to $descriptor.$table"
		catch "exec cp $quakes_db.$table $processdir/." copying_tables
		puts stderr $copying_tables
		catch "exec chmod u+w $descriptor.$table" ch_mode
		puts stderr $ch_mode
	}

	exec touch $descriptor.lastid

	set fd [open $descriptor w]
	puts $fd $schema
	puts -nonewline $fd $site_db:$archive_db
	close $fd

	dbputv $db 0 $row qcanalyst $State(user)

	refresh_dbinfo_if_necessary

	set message "Day [strdate $time] checked out to $State(user) for QCing"
	set answer [mytkdialog [unique_window .] Done $message center \
		   Acknowledge_and_Quit Acknowledge]
	switch $answer {
	0	{
			destroy .
		}
	1	{
			return
		}
	}
}

proc checkin { iwidget widget x y db row } {
	global State env

	pfget qcanalysis_control analyzed_events_database target_db
	set time [dbgetv $db 0 $row time]
	set target_db [epoch2str $time $target_db]
	set dir $env(HOME)/qc/[epoch2str $time %Y_%m]
	set dfile [epoch2str $time analyzed_%Y_%m_%d]
	set message "Check in $dfile from $dir?"
	set answer [mytkdialog [unique_window .] \
		"Database check-in" $message center Ok Cancel]

	set time [dbgetv $db 0 $row time]
	set year [epoch2str $time %Y]
	set jday [epoch2str $time %j]
	set mo [epoch2str $time %m]
	set now [str2epoch now]
	set year_now [epoch2str $now %Y]
	set jday_now [epoch2str $now %j]
	
	set dbtr $State(dbtrack)

	switch $answer {
	0	{
			# Fallthrough
		}
	1	{
			return
		}
	}

	set checkin_approval_msg [approve_checkin $dir/$dfile]
	if { $checkin_approval_msg != "" } {
		mytkdialog [unique_window .] "Database check-in failed" \
			$checkin_approval_msg left Ok
		return
	}

	set tables [list arrival assoc event netmag origerr origin stamag]
	set target_dbdir [exec dirname $target_db]
	exec mkdir -p $target_dbdir/db_daily
	
	puts stderr "+++++++++++++++++Step 1+++++++++++++++++"
	foreach table $tables {
		puts stderr "Copying $target_db.$table to $target_dbdir/db_daily"
		catch "exec cp -f $target_db.$table $target_dbdir/db_daily" copying_tables
		puts stderr $copying_tables
	}
	
	puts stderr "Copying tables to $target_dbdir"
	
	puts stderr "+++++++++++++++++Step 2+++++++++++++++++"
	foreach table $tables {
		puts stderr "Copying $dir/$dfile.$table to $target_dbdir"
		catch "exec cp -f $dir/$dfile.$table $target_dbdir/." copying_tables
		puts stderr $copying_tables
	}


	puts stderr "+++++++++++++++++Step 3+++++++++++++++++"
	puts stderr "Cleaning database $target_db"
	catch "exec aeic_dbclean -v $target_db" cleaning_result 
#	puts stderr $cleaning_result

	puts stderr "+++++++++++++++++Step 4+++++++++++++++++"
	puts stderr "Creating db for updating CNSS catalog"
	set target_dbevolving [epoch2str $time $target_dbdir/analyzed_%Y_%m_evolving]
	set target_cnss [epoch2str $time $target_dbdir/cnss_%Y_%m]
	puts stderr "target_dbevolving $target_dbevolving"
	puts stderr "target_cnss $target_cnss"
	
	set allfiles [exec ls -1 $target_dbdir/]
	set evfiles [lmatch -regexp $allfiles {analyzed_...._.._evolving}]
#	puts stderr "Evolving files to remove $evfiles"
	foreach f $evfiles {
	puts stderr " remove $target_dbdir/$f"
	catch "exec rm -f $target_dbdir/$f" rmevolvingdb_result
	}
#	puts stderr $rmevolvingdb_result

#	catch "exec rm -f $target_dbevolving.arrival $target_dbevolving.assoc $target_dbevolving.event \
#		$target_dbevolving.fplane $target_dbevolving.moment $target_dbevolving.netmag \
#		$target_dbevolving.origerr $target_dbevolving.origin $target_dbevolving.stamag \
#		$target_dbevolving.wfmeas" rmevolvingdb_result
	
	puts stderr "+++++++++++++++++Step 5+++++++++++++++++"
	puts stderr "Concatinate daily databases into monthly evolving db"
	set allfiles [exec ls -1 $target_dbdir/]
	set alldays [lmatch -regexp $allfiles {analyzed_...._.._...origin}]
	foreach f $alldays {
	regsub analyzed_ $f {} tmp
	regsub .origin $tmp {} day
	lappend good_days $target_dbdir/analyzed_$day
	}
	puts stderr "aeic_dbconcat_event  $good_days $target_dbevolving"
	
	catch "exec aeic_dbconcat_event $good_days $target_dbevolving" cnss_update_result 
#	puts stderr $cnss_update_result

	puts stderr "+++++++++++++++++Step 6+++++++++++++++++"
	puts stderr "db2cnss $target_dbevolving $target_cnss"
	catch "exec db2cnss $target_dbevolving $target_cnss" cnss_update_result 
#	puts stderr $cnss_update_result
	
	puts stderr "+++++++++++++++++Step 7+++++++++++++++++"
	puts stderr "Updating summary QC database"
	pfget qcanalysis_control summary_database summary_target_database
	
#	if { ($year_now - $year) == 0 && ($jday_now-$jday) <= 14 || ($year_now - $year) == 1 && ($jday_now+365-$jday) <= 14} {

#	puts stderr "Select QC author"
	set qcauthor AEIC:$State(user)
	
	set dbb [dbopen $target_db r]
	set dborigin [dblookup $dbb 0 origin 0 0]
	set dbevent [dblookup $dbb 0 event 0 0]
	set dberr [dblookup $dbb 0 origerr 0 0]
	set dbnetmag [dblookup $dbb 0 netmag 0 0]
	set dbassoc [dblookup $dbb 0 assoc 0 0]
	set dbarr [dblookup $dbb 0 arrival 0 0]
	set dbstamag [dblookup $dbb 0 stamag 0 0]
	
	set dboriginsubset [dbsubset $dborigin "auth == \"$qcauthor\""]
		set nrecs [dbquery $dboriginsubset dbRECORD_COUNT]

	if { $nrecs <= 0 } {
		return "Check-in Failed:\nNo QCed events in $target_db"
	}

	puts stderr "Nrec for qcauthor $qcauthor is $nrecs"
	
		set db1 [dbjoin $dbevent $dboriginsubset]
		set db2 [dbjoin $db1 $dberr]
		set db3 [dbjoin $db2 $dbassoc]
		set db4 [dbjoin $db3 $dbarr]
		set db5 [dbjoin $db4 $dbnetmag]
		set db6 [dbjoin $db5 $dbstamag]
		set qcout $target_dbdir/qcouttmp
		puts stderr "target_dbdir/qcouttmp $target_dbdir/qcouttmp"
		dbunjoin $db6 $qcout
		
		puts stderr "Changing $qcout.origin lddate to current time"
		catch "exec dbset -C $qcout.origin lddate '*' '$now'" dbset_result
		puts stderr $dbset_result
		puts stderr "Changing $qcout.origin author to QC"
		catch "exec dbset $qcout.origin auth '*' 'AEIC:qc'" dbset_result
		puts stderr $dbset_result
		puts stderr "Cleaning $qcout"
		catch "exec aeic_dbclean $qcout" dbclean_result
		
		puts stderr "Merging $qcout to $summary_target_database"
		catch "exec dbmerge -x emodel,predarr $qcout $summary_target_database" dbmerge_result
		puts stderr $dbmerge_result
		
		dbfree $dboriginsubset
		dbfree $db1
		dbfree $db2
		dbfree $db3
		dbfree $db4
		dbfree $db5
		puts stderr "Removing $target_dbdir/qcouttmp.origin $target_dbdir/qcouttmp.origerr \
			$target_dbdir/qcouttmp.arrival $target_dbdir/qcouttmp.assoc \
			$target_dbdir/qcouttmp.event $target_dbdir/qcouttmp.netmag \
			$target_dbdir/qcouttmp.stamag $target_dbdir/qcouttmp"
		catch "exec rm -f $target_dbdir/qcouttmp.origin $target_dbdir/qcouttmp.origerr \
			$target_dbdir/qcouttmp.arrival $target_dbdir/qcouttmp.assoc \
			$target_dbdir/qcouttmp.event $target_dbdir/qcouttmp.netmag \
			$target_dbdir/qcouttmp.stamag $target_dbdir/qcouttmp" rmqcouttmp_result
		puts stderr $rmqcouttmp_result
		
#	} else {
#		puts stderr "Did not update summary database - checked in day is too old (>14 days)"
#	}

#	foreach f [glob $target_db*] { exec chmod a-w $f }

	refresh_dbinfo_if_necessary

#	update tracking database
	puts stderr "+++++++++++++++++Step 8+++++++++++++++++"
	puts stderr "Update tracking database"
	set qc_submission done	
	set cnss_submission y
	dbputv $db 0 $row qc $qc_submission \
			cnss $cnss_submission
	
	set message "Day [strdate $time] successfully checked in"
	set answer [mytkdialog [unique_window .] Done $message center Acknowledge_and_Quit Acknowledge]
	switch $answer {
	0	{
			destroy .
		}
	1	{
			return
		}
	}
}

proc approve_checkin { dbname } {
	global State
	
	set return_message ""

	set db [dbopen $dbname r]
	set dbevent [dblookup $db 0 event 0 0]
	set dborigin [dblookup $db 0 origin 0 0]
	set db [dbjoin $dbevent $dborigin]

	set db [dbsubset $db "orid == prefor"]

	set nrecs [dbquery $db dbRECORD_COUNT]

	if { $nrecs <= 0 } {
		return "Check-in Failed:\nNo events in $dbname"
	}

#	for { set i 0 } { $i < $nrecs } { incr i } {
#		set auth [dbgetv $db 0 $i origin.auth]
#		set orid [dbgetv $db 0 $i orid]
		
#		if { $auth == $State(auto_auth) } {
#			append return_message \
#		  "Check-in Failed: Preferred orid $orid still has author $State(auto_auth)\n"
#		}
#	}
#
#	return $return_message
}

proc divider {} {
	set w [unique_window .]
	canvas $w 
	pack $w -side top -fill x -expand yes
	$w create rectangle 0 0 [lindex [$w config -width] end] 5 -fill blue
	$w config -height 5
}

proc redraw_checkout {} {
	global State

	if { [winfo exists .checkout.dbe] } { destroy .checkout.dbe }
	if { [winfo exists .checkout.none] } { destroy .checkout.none }

	set db $State(dbtrack)

	set db [dblookup $db 0 days 0 0]
	set db [dbsort -r $db time] 
	set db [dbsubset $db "checkin != NULL && qcanalyst == NULL"]
	set num_avail_for_checkout [dbquery $db dbRECORD_COUNT]

	# set colarr(Available_days) {["epoch" "+%a %b %e, %Y %Z" time]}
	set colarr(Available_days) strdate(time)
	
	if { $num_avail_for_checkout > 0 } {
		dbtable::create .checkout.dbe $db 0 10 [list Available_days] colarr \
			-command checkout  -nopack
		pack .checkout.dbe -fill x -expand yes
		bind .checkout.dbe <Enter> refresh_dbinfo_if_necessary
	} else {
		label .checkout.none \
			-text "No databases available for checkout." \
			-bg beige
		pack .checkout.none -fill x -expand yes
	}

}

proc redraw_checkin {} {
	global State

	if { [winfo exists .checkin.dbe] } { destroy .checkin.dbe }
	if { [winfo exists .checkin.none] } { destroy .checkin.none }

	set db $State(dbtrack)

	set db [dblookup $db 0 days 0 0]
	set db [dbsort $db time] 
	set db [dbsubset $db "qcanalyst == \"$State(user)\" && qc == NULL"]
	set num_avail_for_checkin [dbquery $db dbRECORD_COUNT]

	set colarr(Checked_out) strdate(time)

	if { $num_avail_for_checkin > 0 } {
		dbtable::create .checkin.dbe $db 0 10 [list Checked_out] colarr \
			-command checkin  -nopack
		pack .checkin.dbe -fill x -expand yes
		bind .checkin.dbe <Enter> refresh_dbinfo_if_necessary
	} else {
		label .checkin.none \
			-text "No databases checked out to you for QCing." \
			-bg beige
		pack .checkin.none -fill x -expand yes
	}
}

proc init_windows {} {
	global State

	label .header -text "AEIC QC Analysis Control" -bg yellow -pady 10
	pack .header -side top -fill x

	divider

	frame .checkout 
	pack .checkout -fill x -expand yes
	label .checkout.avail -text "Days available for QCing:" -bg yellow
	pack .checkout.avail -side top -fill x -expand yes

	redraw_checkout

	divider

	frame .checkin
	pack .checkin -fill x -expand yes
	label .checkin.out -text "Days checked out to you for QCing
	
	:" -bg yellow
	pack .checkin.out -side top -fill x -expand yes

	redraw_checkin

	divider

	button .quit -text Quit -bg red -command "destroy ."
	pack .quit -side bottom -fill x

	wm resizable . 0 0
	wm minsize . 225 1
}

proc start_of_this_day { myepoch } {
	return [str2epoch [strdate $myepoch]]	
}

proc start_of_next_day { myepoch } {
	# rewind to beginning of this day:
	set myepoch [start_of_this_day $myepoch]

	# Go to next day, adding leap-second insurance:
	set into_next_day [expr $myepoch + 86400 + 100]

	return [start_of_this_day $into_next_day]
}

proc start_of_this_month { myepoch } {

	set year [epoch2str $myepoch %Y]
	set month_number [epoch2str $myepoch %m]
	#Avoid interpretation in octal:
	regsub ^0* $month_number {} month_number
	
	return [str2epoch [format "%d/1/%d" $month_number $year]]
}

proc start_of_next_month { myepoch } {

	set year [epoch2str $myepoch %Y]
	set month_number [epoch2str $myepoch %m]
	#Avoid interpretation in octal:
	regsub ^0* $month_number {} month_number

	if { $month_number == 12 } {
		incr year 
		set month_number 1
	} else {
		incr month_number
	}
	
	return [str2epoch [format "%d/1/%d" $month_number $year]]
}

proc start_of_week_number { epoch_for_year week_number } {

	set year [epoch2str $epoch_for_year %Y]

	set start_of_firstweek [str2epoch "1/1/$year"]
	while { [epoch2str $start_of_firstweek %A] != "Monday" } {
		set start_of_firstweek [start_of_next_day $start_of_firstweek]
	}

	set start_of_week [expr $start_of_firstweek + ( $week_number - 1 ) * 7 * 86400]

	return $start_of_week
}

proc week_number_of_year { myepoch } {

	set weekone_epoch [start_of_week_number $myepoch 1]
	set weekone_jday [epoch2str $weekone_epoch %j]
	regsub ^0* $weekone_jday {} weekone_jday

	set this_jday [epoch2str $myepoch %j]
	regsub ^0* $this_jday {} this_jday

	return [expr floor( ( $this_jday - $weekone_jday ) / 7 ) + 1];
}

proc start_of_this_week { myepoch } {

	set this_week_number [week_number_of_year $myepoch]

	return [start_of_week_number $myepoch $this_week_number]
}

proc start_of_next_week { myepoch } {
	
	set this_week_number [week_number_of_year $myepoch]

	set next_week_number [expr $this_week_number + 1]

	return [start_of_week_number $myepoch $next_week_number]
}

proc currentify_tracking_database {} {
	global State

	set now [str2epoch now]

	# Update days table
	set State(dbtrack) [dblookup $State(dbtrack) 0 days 0 0]
	set max_day_in_database [dbeval $State(dbtrack) max_table(time)]

	set current_day_start [start_of_this_day $now]

	set day_start [start_of_next_day $max_day_in_database]
	# Don't include current day
	while { $day_start < $current_day_start } {

		set day_end [expr [start_of_next_day $day_start] - 0.001]

		dbaddv $State(dbtrack) days \
			time $day_start \
			endtime $day_end 

		set day_start [start_of_next_day $day_start]
	}

	# Update weeks table
	set State(dbtrack) [dblookup $State(dbtrack) 0 weeks 0 0]
	set max_week_in_database [dbeval $State(dbtrack) max_table(time)]

	set current_week_start [start_of_this_week $now]

	set week_start [start_of_next_week $max_week_in_database]
	while { $week_start <= $current_week_start } {

		set week_end [expr [start_of_next_week $week_start] - 0.001]
		set week_number [week_number_of_year $week_start]

		dbaddv $State(dbtrack) weeks \
			time $week_start \
			endtime $week_end \
			week_number $week_number

		set week_start [start_of_next_week $week_start]
	}

	# Update months table
	set State(dbtrack) [dblookup $State(dbtrack) 0 months 0 0]
	set max_month_in_database [dbeval $State(dbtrack) max_table(time)]

	set current_month_start [start_of_this_month $now]
	
	set recno [dbfind $State(dbtrack) 0 0 {status == "acquiring"}]
	if { $recno >= 0 } {
		set time [dbgetv $State(dbtrack) months $recno time]
		if { $time != $current_month_start } {
			dbputv $State(dbtrack) months $recno status active 
		}	
	}

	set month_start [start_of_next_month $max_month_in_database]
	while { $month_start <= $current_month_start } {

		set month_end [expr [start_of_next_month $month_start] - 0.001]

		if { $month_start == $current_month_start } {
			set status acquiring
		} else {
			set status active
		}

		dbaddv $State(dbtrack) months \
			time $month_start \
			endtime $month_end \
			status $status

		set month_start [start_of_next_month $month_start]
	}
}

proc mytkdialog {w title msg justify args} {
    global tkdialogOk
    catch {destroy $w}
    toplevel $w -class Dialog
    wm title $w $title
    wm iconname $w $title
 
    # Create two frames in the main window. The top frame will hold the
    # message and the bottom one will hold the buttons.  Arrange them
    # one above the other, with any extra vertical space split between
    # them.
 
    frame $w.top -relief raised -border 1
    frame $w.bot -relief raised -border 1
    pack $w.bot $w.top -side bottom -fill both -expand yes
 
    # Create the message widget and arrange for it to be centered in the
    # top frame.
    
    message $w.top.msg -justify $justify \
	    -text $msg \
	    -aspect 500 \
	    -bg beige \
	    -fg red
    catch "$w.top.msg config -font -Adobe-times-medium-r-normal--*-180*"
    pack $w.top.msg -side top -expand yes -padx 3 -pady 3
 
    # Create as many buttons as needed and arrange them from left to right
    # in the bottom frame.  Embed the left button in an additional sunken
    # frame to indicate that it is the default button, and arrange for that
    # button to be invoked as the default action for clicks and returns in
    # the dialog.
 
    if {[llength $args] > 0} {
        set arg [lindex $args 0]
        frame $w.bot.0 -relief sunken -border 1
        pack $w.bot.0 -side left -expand yes -padx 10 -pady 10
        button $w.bot.0.button -text [lindex $arg 0] \
                -command "set tkdialogOk($w) 0; destroy $w"
        pack $w.bot.0.button -expand yes -padx 6 -pady 6
        bind $w <Return> "set tkdialogOk($w) 0; destroy $w"
        focus $w
 
        set i 1
        foreach arg [lrange $args 1 end] {
            button $w.bot.$i -text [lindex $arg 0] \
                    -command "set tkdialogOk($w) $i; destroy $w"
            pack $w.bot.$i -side left -expand yes -padx 10
            incr i
        }
    bind $w <Any-Enter> [list focus $w]
    focus $w

    catch "grab set $w"
    tkwait window $w
    grab release $w
    return $tkdialogOk($w)
    }
    return 0 
}

# if { [exec uname -n] != "nordic" } {
	# Sorry about this HACK. Next time recognize the design weakness from the 
	# outset! This should go away when we can successfully do DBLOCKS across nfs
# 	puts stderr "\n\tanalysis_control: startup failure.\n\t Did you launch analysis control\
# from the root-window pulldown-menu??\n\t(Seis_apps->Analysis_control)\n"
#	exit -1
# }

init_globals

currentify_tracking_database 

init_windows
